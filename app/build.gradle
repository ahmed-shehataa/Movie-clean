plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs'
    id 'kotlin-parcelize'
}

android {
    namespace 'com.ashehata.movieclean'
    compileSdk rootProject.compileSdkVersion

    defaultConfig {
        applicationId "com.reloaded.movieclean"
        minSdk rootProject.minSdkVersion
        targetSdk rootProject.targetSdkVersion
        versionCode  generateVersionCode()
        versionName  generateVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    signingConfigs {
       // my.jks information
       release {
           storePassword project.property("MyApp.signing.password")
           storeFile file(project.property("MyApp.signing"))
           keyAlias project.property("MyApp.signing.alias")
           keyPassword project.property("MyApp.signing.password")
       }
   }

    buildTypes {
        release {
            // Sign the release apk
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    // App dependencies
    implementation "androidx.core:core-ktx:$coreKTX"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.annotation:annotation:$androidXAnnotations"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation "androidx.compose.material:material:$compose_ui_version"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "com.google.accompanist:accompanist-swiperefresh:$swipe"
    implementation "io.coil-kt:coil-compose:$coil"
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accVersion"
    // Paging Compose
    implementation "androidx.paging:paging-compose:$pagingCompose"
    implementation "androidx.navigation:navigation-compose:$nav_version"


    // Architecture Components
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$archLifecycleVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"
    implementation "androidx.core:core-splashscreen:$splash_screen"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleRuntime"
    implementation "androidx.activity:activity-compose:$activityCompose"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$coScope"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.hilt:hilt-navigation-compose:$compose_hilt_navigation_version"

    // External libs
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation("com.squareup.okhttp3:okhttp:$okhttp")
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp"
    implementation "com.squareup.retrofit2:converter-moshi:$moshi"
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    implementation "androidx.datastore:datastore-preferences:$dataStore"

    // Dependencies for local unit tests
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testImplementation "androidx.arch.core:core-testing:$archTestingVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockito_kotlin_version"

    // Dependencies for debug src
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"

    // Dependencies for Android instrumented unit tests
    androidTestImplementation "junit:junit:$junitVersion"
    androidTestImplementation "org.mockito:mockito-core:$mockitoVersion"
    androidTestImplementation "com.linkedin.dexmaker:dexmaker-mockito:$dexMakerVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"

}


private Integer generateVersionCode() {
    return rootProject.majorVersion * 10000 + rootProject.minorVersion * 100 + rootProject.patchVersion
}

private String generateVersionName() {
    String versionName = "${rootProject.majorVersion}.${rootProject.minorVersion}.${rootProject.patchVersion}"
    if (rootProject.preRelease != null) {
        versionName = versionName + "-" + rootProject.preRelease
    }
    return versionName.toLowerCase()
}